// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"billiards/pkg/mysql/model"
)

func newCouponOrder(db *gorm.DB) couponOrder {
	_couponOrder := couponOrder{}

	_couponOrder.couponOrderDo.UseDB(db)
	_couponOrder.couponOrderDo.UseModel(&model.CouponOrder{})

	tableName := _couponOrder.couponOrderDo.TableName()
	_couponOrder.ALL = field.NewAsterisk(tableName)
	_couponOrder.CouponOrderID = field.NewInt32(tableName, "coupon_order_id")
	_couponOrder.OrderID = field.NewInt32(tableName, "order_id")
	_couponOrder.CouponID = field.NewInt32(tableName, "coupon_id")
	_couponOrder.PayAmount = field.NewInt32(tableName, "pay_amount")
	_couponOrder.UserCouponID = field.NewInt32(tableName, "user_coupon_id")
	_couponOrder.Status = field.NewInt(tableName, "status")
	_couponOrder.UserID = field.NewInt32(tableName, "user_id")
	_couponOrder.CreatedAt = field.NewField(tableName, "created_at")
	_couponOrder.UpdatedAt = field.NewField(tableName, "updated_at")

	_couponOrder.fillFieldMap()

	return _couponOrder
}

type couponOrder struct {
	couponOrderDo couponOrderDo

	ALL           field.Asterisk
	CouponOrderID field.Int32
	OrderID       field.Int32
	CouponID      field.Int32
	PayAmount     field.Int32 // 订单支付金额
	UserCouponID  field.Int32
	Status        field.Int // 状态，1｜待支付，2｜已支付
	UserID        field.Int32
	CreatedAt     field.Field
	UpdatedAt     field.Field

	fieldMap map[string]field.Expr
}

func (c couponOrder) Table(newTableName string) *couponOrder {
	c.couponOrderDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c couponOrder) As(alias string) *couponOrder {
	c.couponOrderDo.DO = *(c.couponOrderDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *couponOrder) updateTableName(table string) *couponOrder {
	c.ALL = field.NewAsterisk(table)
	c.CouponOrderID = field.NewInt32(table, "coupon_order_id")
	c.OrderID = field.NewInt32(table, "order_id")
	c.CouponID = field.NewInt32(table, "coupon_id")
	c.PayAmount = field.NewInt32(table, "pay_amount")
	c.UserCouponID = field.NewInt32(table, "user_coupon_id")
	c.Status = field.NewInt(table, "status")
	c.UserID = field.NewInt32(table, "user_id")
	c.CreatedAt = field.NewField(table, "created_at")
	c.UpdatedAt = field.NewField(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *couponOrder) WithContext(ctx context.Context) ICouponOrderDo {
	return c.couponOrderDo.WithContext(ctx)
}

func (c couponOrder) TableName() string { return c.couponOrderDo.TableName() }

func (c couponOrder) Alias() string { return c.couponOrderDo.Alias() }

func (c *couponOrder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *couponOrder) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["coupon_order_id"] = c.CouponOrderID
	c.fieldMap["order_id"] = c.OrderID
	c.fieldMap["coupon_id"] = c.CouponID
	c.fieldMap["pay_amount"] = c.PayAmount
	c.fieldMap["user_coupon_id"] = c.UserCouponID
	c.fieldMap["status"] = c.Status
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c couponOrder) clone(db *gorm.DB) couponOrder {
	c.couponOrderDo.ReplaceDB(db)
	return c
}

type couponOrderDo struct{ gen.DO }

type ICouponOrderDo interface {
	gen.SubQuery
	Debug() ICouponOrderDo
	WithContext(ctx context.Context) ICouponOrderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICouponOrderDo
	Not(conds ...gen.Condition) ICouponOrderDo
	Or(conds ...gen.Condition) ICouponOrderDo
	Select(conds ...field.Expr) ICouponOrderDo
	Where(conds ...gen.Condition) ICouponOrderDo
	Order(conds ...field.Expr) ICouponOrderDo
	Distinct(cols ...field.Expr) ICouponOrderDo
	Omit(cols ...field.Expr) ICouponOrderDo
	Join(table schema.Tabler, on ...field.Expr) ICouponOrderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICouponOrderDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICouponOrderDo
	Group(cols ...field.Expr) ICouponOrderDo
	Having(conds ...gen.Condition) ICouponOrderDo
	Limit(limit int) ICouponOrderDo
	Offset(offset int) ICouponOrderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICouponOrderDo
	Unscoped() ICouponOrderDo
	Create(values ...*model.CouponOrder) error
	CreateInBatches(values []*model.CouponOrder, batchSize int) error
	Save(values ...*model.CouponOrder) error
	First() (*model.CouponOrder, error)
	Take() (*model.CouponOrder, error)
	Last() (*model.CouponOrder, error)
	Find() ([]*model.CouponOrder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CouponOrder, err error)
	FindInBatches(result *[]*model.CouponOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CouponOrder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICouponOrderDo
	Assign(attrs ...field.AssignExpr) ICouponOrderDo
	Joins(fields ...field.RelationField) ICouponOrderDo
	Preload(fields ...field.RelationField) ICouponOrderDo
	FirstOrInit() (*model.CouponOrder, error)
	FirstOrCreate() (*model.CouponOrder, error)
	FindByPage(offset int, limit int) (result []*model.CouponOrder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICouponOrderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c couponOrderDo) Debug() ICouponOrderDo {
	return c.withDO(c.DO.Debug())
}

func (c couponOrderDo) WithContext(ctx context.Context) ICouponOrderDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c couponOrderDo) ReadDB() ICouponOrderDo {
	return c.Clauses(dbresolver.Read)
}

func (c couponOrderDo) WriteDB() ICouponOrderDo {
	return c.Clauses(dbresolver.Write)
}

func (c couponOrderDo) Clauses(conds ...clause.Expression) ICouponOrderDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c couponOrderDo) Returning(value interface{}, columns ...string) ICouponOrderDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c couponOrderDo) Not(conds ...gen.Condition) ICouponOrderDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c couponOrderDo) Or(conds ...gen.Condition) ICouponOrderDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c couponOrderDo) Select(conds ...field.Expr) ICouponOrderDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c couponOrderDo) Where(conds ...gen.Condition) ICouponOrderDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c couponOrderDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICouponOrderDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c couponOrderDo) Order(conds ...field.Expr) ICouponOrderDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c couponOrderDo) Distinct(cols ...field.Expr) ICouponOrderDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c couponOrderDo) Omit(cols ...field.Expr) ICouponOrderDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c couponOrderDo) Join(table schema.Tabler, on ...field.Expr) ICouponOrderDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c couponOrderDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICouponOrderDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c couponOrderDo) RightJoin(table schema.Tabler, on ...field.Expr) ICouponOrderDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c couponOrderDo) Group(cols ...field.Expr) ICouponOrderDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c couponOrderDo) Having(conds ...gen.Condition) ICouponOrderDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c couponOrderDo) Limit(limit int) ICouponOrderDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c couponOrderDo) Offset(offset int) ICouponOrderDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c couponOrderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICouponOrderDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c couponOrderDo) Unscoped() ICouponOrderDo {
	return c.withDO(c.DO.Unscoped())
}

func (c couponOrderDo) Create(values ...*model.CouponOrder) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c couponOrderDo) CreateInBatches(values []*model.CouponOrder, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c couponOrderDo) Save(values ...*model.CouponOrder) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c couponOrderDo) First() (*model.CouponOrder, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CouponOrder), nil
	}
}

func (c couponOrderDo) Take() (*model.CouponOrder, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CouponOrder), nil
	}
}

func (c couponOrderDo) Last() (*model.CouponOrder, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CouponOrder), nil
	}
}

func (c couponOrderDo) Find() ([]*model.CouponOrder, error) {
	result, err := c.DO.Find()
	return result.([]*model.CouponOrder), err
}

func (c couponOrderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CouponOrder, err error) {
	buf := make([]*model.CouponOrder, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c couponOrderDo) FindInBatches(result *[]*model.CouponOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c couponOrderDo) Attrs(attrs ...field.AssignExpr) ICouponOrderDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c couponOrderDo) Assign(attrs ...field.AssignExpr) ICouponOrderDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c couponOrderDo) Joins(fields ...field.RelationField) ICouponOrderDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c couponOrderDo) Preload(fields ...field.RelationField) ICouponOrderDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c couponOrderDo) FirstOrInit() (*model.CouponOrder, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CouponOrder), nil
	}
}

func (c couponOrderDo) FirstOrCreate() (*model.CouponOrder, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CouponOrder), nil
	}
}

func (c couponOrderDo) FindByPage(offset int, limit int) (result []*model.CouponOrder, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c couponOrderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c couponOrderDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c couponOrderDo) Delete(models ...*model.CouponOrder) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *couponOrderDo) withDO(do gen.Dao) *couponOrderDo {
	c.DO = *do.(*gen.DO)
	return c
}
