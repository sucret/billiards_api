// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

var (
	Q         = new(Query)
	Admin     *admin
	AdminRole *adminRole
	Node      *node
	Role      *role
	RoleNode  *roleNode
	Shop      *shop
	Table     *table
	Task      *task
	TaskLog   *taskLog
	Terminal  *terminal
	User      *user
)

func SetDefault(db *gorm.DB) {
	*Q = *Use(db)
	Admin = &Q.Admin
	AdminRole = &Q.AdminRole
	Node = &Q.Node
	Role = &Q.Role
	RoleNode = &Q.RoleNode
	Shop = &Q.Shop
	Table = &Q.Table
	Task = &Q.Task
	TaskLog = &Q.TaskLog
	Terminal = &Q.Terminal
	User = &Q.User
}

func Use(db *gorm.DB) *Query {
	return &Query{
		db:        db,
		Admin:     newAdmin(db),
		AdminRole: newAdminRole(db),
		Node:      newNode(db),
		Role:      newRole(db),
		RoleNode:  newRoleNode(db),
		Shop:      newShop(db),
		Table:     newTable(db),
		Task:      newTask(db),
		TaskLog:   newTaskLog(db),
		Terminal:  newTerminal(db),
		User:      newUser(db),
	}
}

type Query struct {
	db *gorm.DB

	Admin     admin
	AdminRole adminRole
	Node      node
	Role      role
	RoleNode  roleNode
	Shop      shop
	Table     table
	Task      task
	TaskLog   taskLog
	Terminal  terminal
	User      user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:        db,
		Admin:     q.Admin.clone(db),
		AdminRole: q.AdminRole.clone(db),
		Node:      q.Node.clone(db),
		Role:      q.Role.clone(db),
		RoleNode:  q.RoleNode.clone(db),
		Shop:      q.Shop.clone(db),
		Table:     q.Table.clone(db),
		Task:      q.Task.clone(db),
		TaskLog:   q.TaskLog.clone(db),
		Terminal:  q.Terminal.clone(db),
		User:      q.User.clone(db),
	}
}

type queryCtx struct {
	Admin     IAdminDo
	AdminRole IAdminRoleDo
	Node      INodeDo
	Role      IRoleDo
	RoleNode  IRoleNodeDo
	Shop      IShopDo
	Table     ITableDo
	Task      ITaskDo
	TaskLog   ITaskLogDo
	Terminal  ITerminalDo
	User      IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Admin:     q.Admin.WithContext(ctx),
		AdminRole: q.AdminRole.WithContext(ctx),
		Node:      q.Node.WithContext(ctx),
		Role:      q.Role.WithContext(ctx),
		RoleNode:  q.RoleNode.WithContext(ctx),
		Shop:      q.Shop.WithContext(ctx),
		Table:     q.Table.WithContext(ctx),
		Task:      q.Task.WithContext(ctx),
		TaskLog:   q.TaskLog.WithContext(ctx),
		Terminal:  q.Terminal.WithContext(ctx),
		User:      q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
