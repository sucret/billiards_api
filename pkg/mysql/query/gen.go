// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

var (
	Q             = new(Query)
	Admin         *admin
	AdminRole     *adminRole
	Coupon        *coupon
	CouponOrder   *couponOrder
	Node          *node
	Order         *order
	OrderLog      *orderLog
	PaymentOrder  *paymentOrder
	RechargeOrder *rechargeOrder
	RefundOrder   *refundOrder
	Role          *role
	RoleNode      *roleNode
	Shop          *shop
	Table         *table
	TableOrder    *tableOrder
	Task          *task
	TaskLog       *taskLog
	Terminal      *terminal
	User          *user
	UserCoupon    *userCoupon
)

func SetDefault(db *gorm.DB) {
	*Q = *Use(db)
	Admin = &Q.Admin
	AdminRole = &Q.AdminRole
	Coupon = &Q.Coupon
	CouponOrder = &Q.CouponOrder
	Node = &Q.Node
	Order = &Q.Order
	OrderLog = &Q.OrderLog
	PaymentOrder = &Q.PaymentOrder
	RechargeOrder = &Q.RechargeOrder
	RefundOrder = &Q.RefundOrder
	Role = &Q.Role
	RoleNode = &Q.RoleNode
	Shop = &Q.Shop
	Table = &Q.Table
	TableOrder = &Q.TableOrder
	Task = &Q.Task
	TaskLog = &Q.TaskLog
	Terminal = &Q.Terminal
	User = &Q.User
	UserCoupon = &Q.UserCoupon
}

func Use(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		Admin:         newAdmin(db),
		AdminRole:     newAdminRole(db),
		Coupon:        newCoupon(db),
		CouponOrder:   newCouponOrder(db),
		Node:          newNode(db),
		Order:         newOrder(db),
		OrderLog:      newOrderLog(db),
		PaymentOrder:  newPaymentOrder(db),
		RechargeOrder: newRechargeOrder(db),
		RefundOrder:   newRefundOrder(db),
		Role:          newRole(db),
		RoleNode:      newRoleNode(db),
		Shop:          newShop(db),
		Table:         newTable(db),
		TableOrder:    newTableOrder(db),
		Task:          newTask(db),
		TaskLog:       newTaskLog(db),
		Terminal:      newTerminal(db),
		User:          newUser(db),
		UserCoupon:    newUserCoupon(db),
	}
}

type Query struct {
	db *gorm.DB

	Admin         admin
	AdminRole     adminRole
	Coupon        coupon
	CouponOrder   couponOrder
	Node          node
	Order         order
	OrderLog      orderLog
	PaymentOrder  paymentOrder
	RechargeOrder rechargeOrder
	RefundOrder   refundOrder
	Role          role
	RoleNode      roleNode
	Shop          shop
	Table         table
	TableOrder    tableOrder
	Task          task
	TaskLog       taskLog
	Terminal      terminal
	User          user
	UserCoupon    userCoupon
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		Admin:         q.Admin.clone(db),
		AdminRole:     q.AdminRole.clone(db),
		Coupon:        q.Coupon.clone(db),
		CouponOrder:   q.CouponOrder.clone(db),
		Node:          q.Node.clone(db),
		Order:         q.Order.clone(db),
		OrderLog:      q.OrderLog.clone(db),
		PaymentOrder:  q.PaymentOrder.clone(db),
		RechargeOrder: q.RechargeOrder.clone(db),
		RefundOrder:   q.RefundOrder.clone(db),
		Role:          q.Role.clone(db),
		RoleNode:      q.RoleNode.clone(db),
		Shop:          q.Shop.clone(db),
		Table:         q.Table.clone(db),
		TableOrder:    q.TableOrder.clone(db),
		Task:          q.Task.clone(db),
		TaskLog:       q.TaskLog.clone(db),
		Terminal:      q.Terminal.clone(db),
		User:          q.User.clone(db),
		UserCoupon:    q.UserCoupon.clone(db),
	}
}

type queryCtx struct {
	Admin         IAdminDo
	AdminRole     IAdminRoleDo
	Coupon        ICouponDo
	CouponOrder   ICouponOrderDo
	Node          INodeDo
	Order         IOrderDo
	OrderLog      IOrderLogDo
	PaymentOrder  IPaymentOrderDo
	RechargeOrder IRechargeOrderDo
	RefundOrder   IRefundOrderDo
	Role          IRoleDo
	RoleNode      IRoleNodeDo
	Shop          IShopDo
	Table         ITableDo
	TableOrder    ITableOrderDo
	Task          ITaskDo
	TaskLog       ITaskLogDo
	Terminal      ITerminalDo
	User          IUserDo
	UserCoupon    IUserCouponDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Admin:         q.Admin.WithContext(ctx),
		AdminRole:     q.AdminRole.WithContext(ctx),
		Coupon:        q.Coupon.WithContext(ctx),
		CouponOrder:   q.CouponOrder.WithContext(ctx),
		Node:          q.Node.WithContext(ctx),
		Order:         q.Order.WithContext(ctx),
		OrderLog:      q.OrderLog.WithContext(ctx),
		PaymentOrder:  q.PaymentOrder.WithContext(ctx),
		RechargeOrder: q.RechargeOrder.WithContext(ctx),
		RefundOrder:   q.RefundOrder.WithContext(ctx),
		Role:          q.Role.WithContext(ctx),
		RoleNode:      q.RoleNode.WithContext(ctx),
		Shop:          q.Shop.WithContext(ctx),
		Table:         q.Table.WithContext(ctx),
		TableOrder:    q.TableOrder.WithContext(ctx),
		Task:          q.Task.WithContext(ctx),
		TaskLog:       q.TaskLog.WithContext(ctx),
		Terminal:      q.Terminal.WithContext(ctx),
		User:          q.User.WithContext(ctx),
		UserCoupon:    q.UserCoupon.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
