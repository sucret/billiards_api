// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"billiards/pkg/mysql/model"
)

func newNodeBak(db *gorm.DB) nodeBak {
	_nodeBak := nodeBak{}

	_nodeBak.nodeBakDo.UseDB(db)
	_nodeBak.nodeBakDo.UseModel(&model.NodeBak{})

	tableName := _nodeBak.nodeBakDo.TableName()
	_nodeBak.ALL = field.NewAsterisk(tableName)
	_nodeBak.NodeID = field.NewInt32(tableName, "node_id")
	_nodeBak.Title = field.NewString(tableName, "title")
	_nodeBak.Name = field.NewString(tableName, "name")
	_nodeBak.Type = field.NewInt32(tableName, "type")
	_nodeBak.Path = field.NewString(tableName, "path")
	_nodeBak.Icon = field.NewString(tableName, "icon")
	_nodeBak.ParentNodeID = field.NewInt32(tableName, "parent_node_id")
	_nodeBak.Component = field.NewString(tableName, "component")
	_nodeBak.Redirect = field.NewString(tableName, "redirect")
	_nodeBak.CreatedAt = field.NewField(tableName, "created_at")

	_nodeBak.fillFieldMap()

	return _nodeBak
}

type nodeBak struct {
	nodeBakDo nodeBakDo

	ALL          field.Asterisk
	NodeID       field.Int32
	Title        field.String // 名称
	Name         field.String // 页面名称
	Type         field.Int32  // 类型，1|菜单，2|页面，3|菜单&页面，4|接口
	Path         field.String // 操作路径
	Icon         field.String // 图标
	ParentNodeID field.Int32  // 上级节点ID
	Component    field.String
	Redirect     field.String // 重定向地址
	CreatedAt    field.Field  // 创建时间

	fieldMap map[string]field.Expr
}

func (n nodeBak) Table(newTableName string) *nodeBak {
	n.nodeBakDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n nodeBak) As(alias string) *nodeBak {
	n.nodeBakDo.DO = *(n.nodeBakDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *nodeBak) updateTableName(table string) *nodeBak {
	n.ALL = field.NewAsterisk(table)
	n.NodeID = field.NewInt32(table, "node_id")
	n.Title = field.NewString(table, "title")
	n.Name = field.NewString(table, "name")
	n.Type = field.NewInt32(table, "type")
	n.Path = field.NewString(table, "path")
	n.Icon = field.NewString(table, "icon")
	n.ParentNodeID = field.NewInt32(table, "parent_node_id")
	n.Component = field.NewString(table, "component")
	n.Redirect = field.NewString(table, "redirect")
	n.CreatedAt = field.NewField(table, "created_at")

	n.fillFieldMap()

	return n
}

func (n *nodeBak) WithContext(ctx context.Context) INodeBakDo { return n.nodeBakDo.WithContext(ctx) }

func (n nodeBak) TableName() string { return n.nodeBakDo.TableName() }

func (n nodeBak) Alias() string { return n.nodeBakDo.Alias() }

func (n *nodeBak) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *nodeBak) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 10)
	n.fieldMap["node_id"] = n.NodeID
	n.fieldMap["title"] = n.Title
	n.fieldMap["name"] = n.Name
	n.fieldMap["type"] = n.Type
	n.fieldMap["path"] = n.Path
	n.fieldMap["icon"] = n.Icon
	n.fieldMap["parent_node_id"] = n.ParentNodeID
	n.fieldMap["component"] = n.Component
	n.fieldMap["redirect"] = n.Redirect
	n.fieldMap["created_at"] = n.CreatedAt
}

func (n nodeBak) clone(db *gorm.DB) nodeBak {
	n.nodeBakDo.ReplaceDB(db)
	return n
}

type nodeBakDo struct{ gen.DO }

type INodeBakDo interface {
	gen.SubQuery
	Debug() INodeBakDo
	WithContext(ctx context.Context) INodeBakDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INodeBakDo
	Not(conds ...gen.Condition) INodeBakDo
	Or(conds ...gen.Condition) INodeBakDo
	Select(conds ...field.Expr) INodeBakDo
	Where(conds ...gen.Condition) INodeBakDo
	Order(conds ...field.Expr) INodeBakDo
	Distinct(cols ...field.Expr) INodeBakDo
	Omit(cols ...field.Expr) INodeBakDo
	Join(table schema.Tabler, on ...field.Expr) INodeBakDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INodeBakDo
	RightJoin(table schema.Tabler, on ...field.Expr) INodeBakDo
	Group(cols ...field.Expr) INodeBakDo
	Having(conds ...gen.Condition) INodeBakDo
	Limit(limit int) INodeBakDo
	Offset(offset int) INodeBakDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INodeBakDo
	Unscoped() INodeBakDo
	Create(values ...*model.NodeBak) error
	CreateInBatches(values []*model.NodeBak, batchSize int) error
	Save(values ...*model.NodeBak) error
	First() (*model.NodeBak, error)
	Take() (*model.NodeBak, error)
	Last() (*model.NodeBak, error)
	Find() ([]*model.NodeBak, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NodeBak, err error)
	FindInBatches(result *[]*model.NodeBak, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NodeBak) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INodeBakDo
	Assign(attrs ...field.AssignExpr) INodeBakDo
	Joins(fields ...field.RelationField) INodeBakDo
	Preload(fields ...field.RelationField) INodeBakDo
	FirstOrInit() (*model.NodeBak, error)
	FirstOrCreate() (*model.NodeBak, error)
	FindByPage(offset int, limit int) (result []*model.NodeBak, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INodeBakDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n nodeBakDo) Debug() INodeBakDo {
	return n.withDO(n.DO.Debug())
}

func (n nodeBakDo) WithContext(ctx context.Context) INodeBakDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n nodeBakDo) ReadDB() INodeBakDo {
	return n.Clauses(dbresolver.Read)
}

func (n nodeBakDo) WriteDB() INodeBakDo {
	return n.Clauses(dbresolver.Write)
}

func (n nodeBakDo) Clauses(conds ...clause.Expression) INodeBakDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n nodeBakDo) Returning(value interface{}, columns ...string) INodeBakDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n nodeBakDo) Not(conds ...gen.Condition) INodeBakDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n nodeBakDo) Or(conds ...gen.Condition) INodeBakDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n nodeBakDo) Select(conds ...field.Expr) INodeBakDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n nodeBakDo) Where(conds ...gen.Condition) INodeBakDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n nodeBakDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) INodeBakDo {
	return n.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (n nodeBakDo) Order(conds ...field.Expr) INodeBakDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n nodeBakDo) Distinct(cols ...field.Expr) INodeBakDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n nodeBakDo) Omit(cols ...field.Expr) INodeBakDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n nodeBakDo) Join(table schema.Tabler, on ...field.Expr) INodeBakDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n nodeBakDo) LeftJoin(table schema.Tabler, on ...field.Expr) INodeBakDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n nodeBakDo) RightJoin(table schema.Tabler, on ...field.Expr) INodeBakDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n nodeBakDo) Group(cols ...field.Expr) INodeBakDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n nodeBakDo) Having(conds ...gen.Condition) INodeBakDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n nodeBakDo) Limit(limit int) INodeBakDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n nodeBakDo) Offset(offset int) INodeBakDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n nodeBakDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INodeBakDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n nodeBakDo) Unscoped() INodeBakDo {
	return n.withDO(n.DO.Unscoped())
}

func (n nodeBakDo) Create(values ...*model.NodeBak) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n nodeBakDo) CreateInBatches(values []*model.NodeBak, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n nodeBakDo) Save(values ...*model.NodeBak) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n nodeBakDo) First() (*model.NodeBak, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeBak), nil
	}
}

func (n nodeBakDo) Take() (*model.NodeBak, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeBak), nil
	}
}

func (n nodeBakDo) Last() (*model.NodeBak, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeBak), nil
	}
}

func (n nodeBakDo) Find() ([]*model.NodeBak, error) {
	result, err := n.DO.Find()
	return result.([]*model.NodeBak), err
}

func (n nodeBakDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NodeBak, err error) {
	buf := make([]*model.NodeBak, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n nodeBakDo) FindInBatches(result *[]*model.NodeBak, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n nodeBakDo) Attrs(attrs ...field.AssignExpr) INodeBakDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n nodeBakDo) Assign(attrs ...field.AssignExpr) INodeBakDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n nodeBakDo) Joins(fields ...field.RelationField) INodeBakDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n nodeBakDo) Preload(fields ...field.RelationField) INodeBakDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n nodeBakDo) FirstOrInit() (*model.NodeBak, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeBak), nil
	}
}

func (n nodeBakDo) FirstOrCreate() (*model.NodeBak, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeBak), nil
	}
}

func (n nodeBakDo) FindByPage(offset int, limit int) (result []*model.NodeBak, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n nodeBakDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n nodeBakDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n nodeBakDo) Delete(models ...*model.NodeBak) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *nodeBakDo) withDO(do gen.Dao) *nodeBakDo {
	n.DO = *do.(*gen.DO)
	return n
}
