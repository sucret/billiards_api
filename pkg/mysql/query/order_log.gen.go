// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"billiards/pkg/mysql/model"
)

func newOrderLog(db *gorm.DB) orderLog {
	_orderLog := orderLog{}

	_orderLog.orderLogDo.UseDB(db)
	_orderLog.orderLogDo.UseModel(&model.OrderLog{})

	tableName := _orderLog.orderLogDo.TableName()
	_orderLog.ALL = field.NewAsterisk(tableName)
	_orderLog.OrderLogID = field.NewInt32(tableName, "order_log_id")
	_orderLog.OrderID = field.NewInt32(tableName, "order_id")
	_orderLog.Type = field.NewInt32(tableName, "type")
	_orderLog.Remark = field.NewString(tableName, "remark")
	_orderLog.CreatedAt = field.NewField(tableName, "created_at")

	_orderLog.fillFieldMap()

	return _orderLog
}

type orderLog struct {
	orderLogDo orderLogDo

	ALL        field.Asterisk
	OrderLogID field.Int32
	OrderID    field.Int32
	Type       field.Int32 // 日志类型，1｜发起订单，2｜发起支付，3｜支付完成，4｜取消订单，5｜续费，6｜发起关闭订单，7｜关闭订单失败，8｜关闭订单成功
	Remark     field.String
	CreatedAt  field.Field

	fieldMap map[string]field.Expr
}

func (o orderLog) Table(newTableName string) *orderLog {
	o.orderLogDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderLog) As(alias string) *orderLog {
	o.orderLogDo.DO = *(o.orderLogDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderLog) updateTableName(table string) *orderLog {
	o.ALL = field.NewAsterisk(table)
	o.OrderLogID = field.NewInt32(table, "order_log_id")
	o.OrderID = field.NewInt32(table, "order_id")
	o.Type = field.NewInt32(table, "type")
	o.Remark = field.NewString(table, "remark")
	o.CreatedAt = field.NewField(table, "created_at")

	o.fillFieldMap()

	return o
}

func (o *orderLog) WithContext(ctx context.Context) IOrderLogDo { return o.orderLogDo.WithContext(ctx) }

func (o orderLog) TableName() string { return o.orderLogDo.TableName() }

func (o orderLog) Alias() string { return o.orderLogDo.Alias() }

func (o *orderLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderLog) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 5)
	o.fieldMap["order_log_id"] = o.OrderLogID
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["type"] = o.Type
	o.fieldMap["remark"] = o.Remark
	o.fieldMap["created_at"] = o.CreatedAt
}

func (o orderLog) clone(db *gorm.DB) orderLog {
	o.orderLogDo.ReplaceDB(db)
	return o
}

type orderLogDo struct{ gen.DO }

type IOrderLogDo interface {
	gen.SubQuery
	Debug() IOrderLogDo
	WithContext(ctx context.Context) IOrderLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderLogDo
	Not(conds ...gen.Condition) IOrderLogDo
	Or(conds ...gen.Condition) IOrderLogDo
	Select(conds ...field.Expr) IOrderLogDo
	Where(conds ...gen.Condition) IOrderLogDo
	Order(conds ...field.Expr) IOrderLogDo
	Distinct(cols ...field.Expr) IOrderLogDo
	Omit(cols ...field.Expr) IOrderLogDo
	Join(table schema.Tabler, on ...field.Expr) IOrderLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderLogDo
	Group(cols ...field.Expr) IOrderLogDo
	Having(conds ...gen.Condition) IOrderLogDo
	Limit(limit int) IOrderLogDo
	Offset(offset int) IOrderLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderLogDo
	Unscoped() IOrderLogDo
	Create(values ...*model.OrderLog) error
	CreateInBatches(values []*model.OrderLog, batchSize int) error
	Save(values ...*model.OrderLog) error
	First() (*model.OrderLog, error)
	Take() (*model.OrderLog, error)
	Last() (*model.OrderLog, error)
	Find() ([]*model.OrderLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderLog, err error)
	FindInBatches(result *[]*model.OrderLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OrderLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderLogDo
	Assign(attrs ...field.AssignExpr) IOrderLogDo
	Joins(fields ...field.RelationField) IOrderLogDo
	Preload(fields ...field.RelationField) IOrderLogDo
	FirstOrInit() (*model.OrderLog, error)
	FirstOrCreate() (*model.OrderLog, error)
	FindByPage(offset int, limit int) (result []*model.OrderLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderLogDo) Debug() IOrderLogDo {
	return o.withDO(o.DO.Debug())
}

func (o orderLogDo) WithContext(ctx context.Context) IOrderLogDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderLogDo) ReadDB() IOrderLogDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderLogDo) WriteDB() IOrderLogDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderLogDo) Clauses(conds ...clause.Expression) IOrderLogDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderLogDo) Returning(value interface{}, columns ...string) IOrderLogDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderLogDo) Not(conds ...gen.Condition) IOrderLogDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderLogDo) Or(conds ...gen.Condition) IOrderLogDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderLogDo) Select(conds ...field.Expr) IOrderLogDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderLogDo) Where(conds ...gen.Condition) IOrderLogDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IOrderLogDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o orderLogDo) Order(conds ...field.Expr) IOrderLogDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderLogDo) Distinct(cols ...field.Expr) IOrderLogDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderLogDo) Omit(cols ...field.Expr) IOrderLogDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderLogDo) Join(table schema.Tabler, on ...field.Expr) IOrderLogDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderLogDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderLogDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderLogDo) Group(cols ...field.Expr) IOrderLogDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderLogDo) Having(conds ...gen.Condition) IOrderLogDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderLogDo) Limit(limit int) IOrderLogDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderLogDo) Offset(offset int) IOrderLogDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderLogDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderLogDo) Unscoped() IOrderLogDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderLogDo) Create(values ...*model.OrderLog) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderLogDo) CreateInBatches(values []*model.OrderLog, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderLogDo) Save(values ...*model.OrderLog) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderLogDo) First() (*model.OrderLog, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderLog), nil
	}
}

func (o orderLogDo) Take() (*model.OrderLog, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderLog), nil
	}
}

func (o orderLogDo) Last() (*model.OrderLog, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderLog), nil
	}
}

func (o orderLogDo) Find() ([]*model.OrderLog, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrderLog), err
}

func (o orderLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderLog, err error) {
	buf := make([]*model.OrderLog, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderLogDo) FindInBatches(result *[]*model.OrderLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderLogDo) Attrs(attrs ...field.AssignExpr) IOrderLogDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderLogDo) Assign(attrs ...field.AssignExpr) IOrderLogDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderLogDo) Joins(fields ...field.RelationField) IOrderLogDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderLogDo) Preload(fields ...field.RelationField) IOrderLogDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderLogDo) FirstOrInit() (*model.OrderLog, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderLog), nil
	}
}

func (o orderLogDo) FirstOrCreate() (*model.OrderLog, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderLog), nil
	}
}

func (o orderLogDo) FindByPage(offset int, limit int) (result []*model.OrderLog, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderLogDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderLogDo) Delete(models ...*model.OrderLog) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderLogDo) withDO(do gen.Dao) *orderLogDo {
	o.DO = *do.(*gen.DO)
	return o
}
