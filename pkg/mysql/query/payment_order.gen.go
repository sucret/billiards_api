// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"billiards/pkg/mysql/model"
)

func newPaymentOrder(db *gorm.DB) paymentOrder {
	_paymentOrder := paymentOrder{}

	_paymentOrder.paymentOrderDo.UseDB(db)
	_paymentOrder.paymentOrderDo.UseModel(&model.PaymentOrder{})

	tableName := _paymentOrder.paymentOrderDo.TableName()
	_paymentOrder.ALL = field.NewAsterisk(tableName)
	_paymentOrder.PaymentOrderID = field.NewInt32(tableName, "payment_order_id")
	_paymentOrder.OrderID = field.NewInt32(tableName, "order_id")
	_paymentOrder.OrderType = field.NewInt32(tableName, "order_type")
	_paymentOrder.PaymentOrderNo = field.NewString(tableName, "payment_order_no")
	_paymentOrder.Amount = field.NewInt32(tableName, "amount")
	_paymentOrder.NotifyID = field.NewString(tableName, "notify_id")
	_paymentOrder.Resource = field.NewString(tableName, "resource")
	_paymentOrder.BankType = field.NewString(tableName, "bank_type")
	_paymentOrder.TransactionID = field.NewString(tableName, "transaction_id")
	_paymentOrder.TradeState = field.NewString(tableName, "trade_state")
	_paymentOrder.CreatedAt = field.NewField(tableName, "created_at")
	_paymentOrder.UpdatedAt = field.NewField(tableName, "updated_at")

	_paymentOrder.fillFieldMap()

	return _paymentOrder
}

type paymentOrder struct {
	paymentOrderDo paymentOrderDo

	ALL            field.Asterisk
	PaymentOrderID field.Int32
	OrderID        field.Int32
	OrderType      field.Int32  // 订单类型，1｜开台订单支付，2｜充值支付
	PaymentOrderNo field.String // 订单号
	Amount         field.Int32
	NotifyID       field.String // 微信通知id
	Resource       field.String
	BankType       field.String // 银行
	TransactionID  field.String // 微信支付系统订单号
	/*
		交易状态，枚举值：
		SUCCESS：支付成功
		REFUND：转入退款
		NOTPAY：未支付
		CLOSED：已关闭
		REVOKED：已撤销（付款码支付）
		USERPAYING：用户支付中（付款码支付）
		PAYERROR：支付失败(其他原因，如银行返回失败)
	*/
	TradeState field.String
	CreatedAt  field.Field
	UpdatedAt  field.Field

	fieldMap map[string]field.Expr
}

func (p paymentOrder) Table(newTableName string) *paymentOrder {
	p.paymentOrderDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p paymentOrder) As(alias string) *paymentOrder {
	p.paymentOrderDo.DO = *(p.paymentOrderDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *paymentOrder) updateTableName(table string) *paymentOrder {
	p.ALL = field.NewAsterisk(table)
	p.PaymentOrderID = field.NewInt32(table, "payment_order_id")
	p.OrderID = field.NewInt32(table, "order_id")
	p.OrderType = field.NewInt32(table, "order_type")
	p.PaymentOrderNo = field.NewString(table, "payment_order_no")
	p.Amount = field.NewInt32(table, "amount")
	p.NotifyID = field.NewString(table, "notify_id")
	p.Resource = field.NewString(table, "resource")
	p.BankType = field.NewString(table, "bank_type")
	p.TransactionID = field.NewString(table, "transaction_id")
	p.TradeState = field.NewString(table, "trade_state")
	p.CreatedAt = field.NewField(table, "created_at")
	p.UpdatedAt = field.NewField(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *paymentOrder) WithContext(ctx context.Context) IPaymentOrderDo {
	return p.paymentOrderDo.WithContext(ctx)
}

func (p paymentOrder) TableName() string { return p.paymentOrderDo.TableName() }

func (p paymentOrder) Alias() string { return p.paymentOrderDo.Alias() }

func (p *paymentOrder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *paymentOrder) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 12)
	p.fieldMap["payment_order_id"] = p.PaymentOrderID
	p.fieldMap["order_id"] = p.OrderID
	p.fieldMap["order_type"] = p.OrderType
	p.fieldMap["payment_order_no"] = p.PaymentOrderNo
	p.fieldMap["amount"] = p.Amount
	p.fieldMap["notify_id"] = p.NotifyID
	p.fieldMap["resource"] = p.Resource
	p.fieldMap["bank_type"] = p.BankType
	p.fieldMap["transaction_id"] = p.TransactionID
	p.fieldMap["trade_state"] = p.TradeState
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p paymentOrder) clone(db *gorm.DB) paymentOrder {
	p.paymentOrderDo.ReplaceDB(db)
	return p
}

type paymentOrderDo struct{ gen.DO }

type IPaymentOrderDo interface {
	gen.SubQuery
	Debug() IPaymentOrderDo
	WithContext(ctx context.Context) IPaymentOrderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPaymentOrderDo
	Not(conds ...gen.Condition) IPaymentOrderDo
	Or(conds ...gen.Condition) IPaymentOrderDo
	Select(conds ...field.Expr) IPaymentOrderDo
	Where(conds ...gen.Condition) IPaymentOrderDo
	Order(conds ...field.Expr) IPaymentOrderDo
	Distinct(cols ...field.Expr) IPaymentOrderDo
	Omit(cols ...field.Expr) IPaymentOrderDo
	Join(table schema.Tabler, on ...field.Expr) IPaymentOrderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPaymentOrderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPaymentOrderDo
	Group(cols ...field.Expr) IPaymentOrderDo
	Having(conds ...gen.Condition) IPaymentOrderDo
	Limit(limit int) IPaymentOrderDo
	Offset(offset int) IPaymentOrderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPaymentOrderDo
	Unscoped() IPaymentOrderDo
	Create(values ...*model.PaymentOrder) error
	CreateInBatches(values []*model.PaymentOrder, batchSize int) error
	Save(values ...*model.PaymentOrder) error
	First() (*model.PaymentOrder, error)
	Take() (*model.PaymentOrder, error)
	Last() (*model.PaymentOrder, error)
	Find() ([]*model.PaymentOrder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PaymentOrder, err error)
	FindInBatches(result *[]*model.PaymentOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PaymentOrder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPaymentOrderDo
	Assign(attrs ...field.AssignExpr) IPaymentOrderDo
	Joins(fields ...field.RelationField) IPaymentOrderDo
	Preload(fields ...field.RelationField) IPaymentOrderDo
	FirstOrInit() (*model.PaymentOrder, error)
	FirstOrCreate() (*model.PaymentOrder, error)
	FindByPage(offset int, limit int) (result []*model.PaymentOrder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPaymentOrderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p paymentOrderDo) Debug() IPaymentOrderDo {
	return p.withDO(p.DO.Debug())
}

func (p paymentOrderDo) WithContext(ctx context.Context) IPaymentOrderDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p paymentOrderDo) ReadDB() IPaymentOrderDo {
	return p.Clauses(dbresolver.Read)
}

func (p paymentOrderDo) WriteDB() IPaymentOrderDo {
	return p.Clauses(dbresolver.Write)
}

func (p paymentOrderDo) Clauses(conds ...clause.Expression) IPaymentOrderDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p paymentOrderDo) Returning(value interface{}, columns ...string) IPaymentOrderDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p paymentOrderDo) Not(conds ...gen.Condition) IPaymentOrderDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p paymentOrderDo) Or(conds ...gen.Condition) IPaymentOrderDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p paymentOrderDo) Select(conds ...field.Expr) IPaymentOrderDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p paymentOrderDo) Where(conds ...gen.Condition) IPaymentOrderDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p paymentOrderDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPaymentOrderDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p paymentOrderDo) Order(conds ...field.Expr) IPaymentOrderDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p paymentOrderDo) Distinct(cols ...field.Expr) IPaymentOrderDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p paymentOrderDo) Omit(cols ...field.Expr) IPaymentOrderDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p paymentOrderDo) Join(table schema.Tabler, on ...field.Expr) IPaymentOrderDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p paymentOrderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPaymentOrderDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p paymentOrderDo) RightJoin(table schema.Tabler, on ...field.Expr) IPaymentOrderDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p paymentOrderDo) Group(cols ...field.Expr) IPaymentOrderDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p paymentOrderDo) Having(conds ...gen.Condition) IPaymentOrderDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p paymentOrderDo) Limit(limit int) IPaymentOrderDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p paymentOrderDo) Offset(offset int) IPaymentOrderDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p paymentOrderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPaymentOrderDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p paymentOrderDo) Unscoped() IPaymentOrderDo {
	return p.withDO(p.DO.Unscoped())
}

func (p paymentOrderDo) Create(values ...*model.PaymentOrder) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p paymentOrderDo) CreateInBatches(values []*model.PaymentOrder, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p paymentOrderDo) Save(values ...*model.PaymentOrder) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p paymentOrderDo) First() (*model.PaymentOrder, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentOrder), nil
	}
}

func (p paymentOrderDo) Take() (*model.PaymentOrder, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentOrder), nil
	}
}

func (p paymentOrderDo) Last() (*model.PaymentOrder, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentOrder), nil
	}
}

func (p paymentOrderDo) Find() ([]*model.PaymentOrder, error) {
	result, err := p.DO.Find()
	return result.([]*model.PaymentOrder), err
}

func (p paymentOrderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PaymentOrder, err error) {
	buf := make([]*model.PaymentOrder, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p paymentOrderDo) FindInBatches(result *[]*model.PaymentOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p paymentOrderDo) Attrs(attrs ...field.AssignExpr) IPaymentOrderDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p paymentOrderDo) Assign(attrs ...field.AssignExpr) IPaymentOrderDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p paymentOrderDo) Joins(fields ...field.RelationField) IPaymentOrderDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p paymentOrderDo) Preload(fields ...field.RelationField) IPaymentOrderDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p paymentOrderDo) FirstOrInit() (*model.PaymentOrder, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentOrder), nil
	}
}

func (p paymentOrderDo) FirstOrCreate() (*model.PaymentOrder, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentOrder), nil
	}
}

func (p paymentOrderDo) FindByPage(offset int, limit int) (result []*model.PaymentOrder, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p paymentOrderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p paymentOrderDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p paymentOrderDo) Delete(models ...*model.PaymentOrder) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *paymentOrderDo) withDO(do gen.Dao) *paymentOrderDo {
	p.DO = *do.(*gen.DO)
	return p
}
