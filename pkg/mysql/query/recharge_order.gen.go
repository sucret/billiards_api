// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"billiards/pkg/mysql/model"
)

func newRechargeOrder(db *gorm.DB) rechargeOrder {
	_rechargeOrder := rechargeOrder{}

	_rechargeOrder.rechargeOrderDo.UseDB(db)
	_rechargeOrder.rechargeOrderDo.UseModel(&model.RechargeOrder{})

	tableName := _rechargeOrder.rechargeOrderDo.TableName()
	_rechargeOrder.ALL = field.NewAsterisk(tableName)
	_rechargeOrder.OrderID = field.NewInt32(tableName, "order_id")
	_rechargeOrder.UserID = field.NewInt32(tableName, "user_id")
	_rechargeOrder.Status = field.NewInt32(tableName, "status")
	_rechargeOrder.Amount = field.NewInt32(tableName, "amount")
	_rechargeOrder.BundledAmount = field.NewInt32(tableName, "bundled_amount")
	_rechargeOrder.CreatedAt = field.NewField(tableName, "created_at")
	_rechargeOrder.UpdatedAt = field.NewField(tableName, "updated_at")

	_rechargeOrder.fillFieldMap()

	return _rechargeOrder
}

type rechargeOrder struct {
	rechargeOrderDo rechargeOrderDo

	ALL           field.Asterisk
	OrderID       field.Int32
	UserID        field.Int32
	Status        field.Int32 // 订单状态，1｜待支付，2｜支付完成，3｜支付取消
	Amount        field.Int32 // 实际支付金额
	BundledAmount field.Int32 // 赠送金额
	CreatedAt     field.Field
	UpdatedAt     field.Field

	fieldMap map[string]field.Expr
}

func (r rechargeOrder) Table(newTableName string) *rechargeOrder {
	r.rechargeOrderDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rechargeOrder) As(alias string) *rechargeOrder {
	r.rechargeOrderDo.DO = *(r.rechargeOrderDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rechargeOrder) updateTableName(table string) *rechargeOrder {
	r.ALL = field.NewAsterisk(table)
	r.OrderID = field.NewInt32(table, "order_id")
	r.UserID = field.NewInt32(table, "user_id")
	r.Status = field.NewInt32(table, "status")
	r.Amount = field.NewInt32(table, "amount")
	r.BundledAmount = field.NewInt32(table, "bundled_amount")
	r.CreatedAt = field.NewField(table, "created_at")
	r.UpdatedAt = field.NewField(table, "updated_at")

	r.fillFieldMap()

	return r
}

func (r *rechargeOrder) WithContext(ctx context.Context) IRechargeOrderDo {
	return r.rechargeOrderDo.WithContext(ctx)
}

func (r rechargeOrder) TableName() string { return r.rechargeOrderDo.TableName() }

func (r rechargeOrder) Alias() string { return r.rechargeOrderDo.Alias() }

func (r *rechargeOrder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rechargeOrder) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 7)
	r.fieldMap["order_id"] = r.OrderID
	r.fieldMap["user_id"] = r.UserID
	r.fieldMap["status"] = r.Status
	r.fieldMap["amount"] = r.Amount
	r.fieldMap["bundled_amount"] = r.BundledAmount
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
}

func (r rechargeOrder) clone(db *gorm.DB) rechargeOrder {
	r.rechargeOrderDo.ReplaceDB(db)
	return r
}

type rechargeOrderDo struct{ gen.DO }

type IRechargeOrderDo interface {
	gen.SubQuery
	Debug() IRechargeOrderDo
	WithContext(ctx context.Context) IRechargeOrderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRechargeOrderDo
	Not(conds ...gen.Condition) IRechargeOrderDo
	Or(conds ...gen.Condition) IRechargeOrderDo
	Select(conds ...field.Expr) IRechargeOrderDo
	Where(conds ...gen.Condition) IRechargeOrderDo
	Order(conds ...field.Expr) IRechargeOrderDo
	Distinct(cols ...field.Expr) IRechargeOrderDo
	Omit(cols ...field.Expr) IRechargeOrderDo
	Join(table schema.Tabler, on ...field.Expr) IRechargeOrderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRechargeOrderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRechargeOrderDo
	Group(cols ...field.Expr) IRechargeOrderDo
	Having(conds ...gen.Condition) IRechargeOrderDo
	Limit(limit int) IRechargeOrderDo
	Offset(offset int) IRechargeOrderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRechargeOrderDo
	Unscoped() IRechargeOrderDo
	Create(values ...*model.RechargeOrder) error
	CreateInBatches(values []*model.RechargeOrder, batchSize int) error
	Save(values ...*model.RechargeOrder) error
	First() (*model.RechargeOrder, error)
	Take() (*model.RechargeOrder, error)
	Last() (*model.RechargeOrder, error)
	Find() ([]*model.RechargeOrder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RechargeOrder, err error)
	FindInBatches(result *[]*model.RechargeOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RechargeOrder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRechargeOrderDo
	Assign(attrs ...field.AssignExpr) IRechargeOrderDo
	Joins(fields ...field.RelationField) IRechargeOrderDo
	Preload(fields ...field.RelationField) IRechargeOrderDo
	FirstOrInit() (*model.RechargeOrder, error)
	FirstOrCreate() (*model.RechargeOrder, error)
	FindByPage(offset int, limit int) (result []*model.RechargeOrder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRechargeOrderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r rechargeOrderDo) Debug() IRechargeOrderDo {
	return r.withDO(r.DO.Debug())
}

func (r rechargeOrderDo) WithContext(ctx context.Context) IRechargeOrderDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rechargeOrderDo) ReadDB() IRechargeOrderDo {
	return r.Clauses(dbresolver.Read)
}

func (r rechargeOrderDo) WriteDB() IRechargeOrderDo {
	return r.Clauses(dbresolver.Write)
}

func (r rechargeOrderDo) Clauses(conds ...clause.Expression) IRechargeOrderDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rechargeOrderDo) Returning(value interface{}, columns ...string) IRechargeOrderDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rechargeOrderDo) Not(conds ...gen.Condition) IRechargeOrderDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rechargeOrderDo) Or(conds ...gen.Condition) IRechargeOrderDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rechargeOrderDo) Select(conds ...field.Expr) IRechargeOrderDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rechargeOrderDo) Where(conds ...gen.Condition) IRechargeOrderDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rechargeOrderDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRechargeOrderDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r rechargeOrderDo) Order(conds ...field.Expr) IRechargeOrderDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rechargeOrderDo) Distinct(cols ...field.Expr) IRechargeOrderDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rechargeOrderDo) Omit(cols ...field.Expr) IRechargeOrderDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rechargeOrderDo) Join(table schema.Tabler, on ...field.Expr) IRechargeOrderDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rechargeOrderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRechargeOrderDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rechargeOrderDo) RightJoin(table schema.Tabler, on ...field.Expr) IRechargeOrderDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rechargeOrderDo) Group(cols ...field.Expr) IRechargeOrderDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rechargeOrderDo) Having(conds ...gen.Condition) IRechargeOrderDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rechargeOrderDo) Limit(limit int) IRechargeOrderDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rechargeOrderDo) Offset(offset int) IRechargeOrderDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rechargeOrderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRechargeOrderDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rechargeOrderDo) Unscoped() IRechargeOrderDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rechargeOrderDo) Create(values ...*model.RechargeOrder) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rechargeOrderDo) CreateInBatches(values []*model.RechargeOrder, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rechargeOrderDo) Save(values ...*model.RechargeOrder) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rechargeOrderDo) First() (*model.RechargeOrder, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargeOrder), nil
	}
}

func (r rechargeOrderDo) Take() (*model.RechargeOrder, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargeOrder), nil
	}
}

func (r rechargeOrderDo) Last() (*model.RechargeOrder, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargeOrder), nil
	}
}

func (r rechargeOrderDo) Find() ([]*model.RechargeOrder, error) {
	result, err := r.DO.Find()
	return result.([]*model.RechargeOrder), err
}

func (r rechargeOrderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RechargeOrder, err error) {
	buf := make([]*model.RechargeOrder, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rechargeOrderDo) FindInBatches(result *[]*model.RechargeOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rechargeOrderDo) Attrs(attrs ...field.AssignExpr) IRechargeOrderDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rechargeOrderDo) Assign(attrs ...field.AssignExpr) IRechargeOrderDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rechargeOrderDo) Joins(fields ...field.RelationField) IRechargeOrderDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rechargeOrderDo) Preload(fields ...field.RelationField) IRechargeOrderDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rechargeOrderDo) FirstOrInit() (*model.RechargeOrder, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargeOrder), nil
	}
}

func (r rechargeOrderDo) FirstOrCreate() (*model.RechargeOrder, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RechargeOrder), nil
	}
}

func (r rechargeOrderDo) FindByPage(offset int, limit int) (result []*model.RechargeOrder, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rechargeOrderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rechargeOrderDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rechargeOrderDo) Delete(models ...*model.RechargeOrder) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rechargeOrderDo) withDO(do gen.Dao) *rechargeOrderDo {
	r.DO = *do.(*gen.DO)
	return r
}
