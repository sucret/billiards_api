// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"billiards/pkg/mysql/model"
)

func newTerminal(db *gorm.DB) terminal {
	_terminal := terminal{}

	_terminal.terminalDo.UseDB(db)
	_terminal.terminalDo.UseModel(&model.Terminal{})

	tableName := _terminal.terminalDo.TableName()
	_terminal.ALL = field.NewAsterisk(tableName)
	_terminal.TerminalID = field.NewInt32(tableName, "terminal_id")
	_terminal.Type = field.NewInt32(tableName, "type")
	_terminal.ShopID = field.NewInt32(tableName, "shop_id")
	_terminal.TableID = field.NewInt32(tableName, "table_id")
	_terminal.Name = field.NewString(tableName, "name")
	_terminal.Status = field.NewInt32(tableName, "status")
	_terminal.URL = field.NewString(tableName, "url")
	_terminal.CreatedAt = field.NewField(tableName, "created_at")
	_terminal.DeletedAt = field.NewField(tableName, "deleted_at")

	_terminal.fillFieldMap()

	return _terminal
}

type terminal struct {
	terminalDo terminalDo

	ALL        field.Asterisk
	TerminalID field.Int32
	Type       field.Int32  // 类型，1｜灯光，2｜锁球器、3｜图像识别芯片，4｜店铺摄像头，5｜球桌摄像头
	ShopID     field.Int32  // 店铺id
	TableID    field.Int32  // 桌id
	Name       field.String // 设备名称
	Status     field.Int32  // 状态，1｜开启，2｜关闭
	URL        field.String // 控制地址
	CreatedAt  field.Field
	DeletedAt  field.Field // 删除时间

	fieldMap map[string]field.Expr
}

func (t terminal) Table(newTableName string) *terminal {
	t.terminalDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t terminal) As(alias string) *terminal {
	t.terminalDo.DO = *(t.terminalDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *terminal) updateTableName(table string) *terminal {
	t.ALL = field.NewAsterisk(table)
	t.TerminalID = field.NewInt32(table, "terminal_id")
	t.Type = field.NewInt32(table, "type")
	t.ShopID = field.NewInt32(table, "shop_id")
	t.TableID = field.NewInt32(table, "table_id")
	t.Name = field.NewString(table, "name")
	t.Status = field.NewInt32(table, "status")
	t.URL = field.NewString(table, "url")
	t.CreatedAt = field.NewField(table, "created_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *terminal) WithContext(ctx context.Context) ITerminalDo { return t.terminalDo.WithContext(ctx) }

func (t terminal) TableName() string { return t.terminalDo.TableName() }

func (t terminal) Alias() string { return t.terminalDo.Alias() }

func (t *terminal) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *terminal) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["terminal_id"] = t.TerminalID
	t.fieldMap["type"] = t.Type
	t.fieldMap["shop_id"] = t.ShopID
	t.fieldMap["table_id"] = t.TableID
	t.fieldMap["name"] = t.Name
	t.fieldMap["status"] = t.Status
	t.fieldMap["url"] = t.URL
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t terminal) clone(db *gorm.DB) terminal {
	t.terminalDo.ReplaceDB(db)
	return t
}

type terminalDo struct{ gen.DO }

type ITerminalDo interface {
	gen.SubQuery
	Debug() ITerminalDo
	WithContext(ctx context.Context) ITerminalDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITerminalDo
	Not(conds ...gen.Condition) ITerminalDo
	Or(conds ...gen.Condition) ITerminalDo
	Select(conds ...field.Expr) ITerminalDo
	Where(conds ...gen.Condition) ITerminalDo
	Order(conds ...field.Expr) ITerminalDo
	Distinct(cols ...field.Expr) ITerminalDo
	Omit(cols ...field.Expr) ITerminalDo
	Join(table schema.Tabler, on ...field.Expr) ITerminalDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITerminalDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITerminalDo
	Group(cols ...field.Expr) ITerminalDo
	Having(conds ...gen.Condition) ITerminalDo
	Limit(limit int) ITerminalDo
	Offset(offset int) ITerminalDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITerminalDo
	Unscoped() ITerminalDo
	Create(values ...*model.Terminal) error
	CreateInBatches(values []*model.Terminal, batchSize int) error
	Save(values ...*model.Terminal) error
	First() (*model.Terminal, error)
	Take() (*model.Terminal, error)
	Last() (*model.Terminal, error)
	Find() ([]*model.Terminal, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Terminal, err error)
	FindInBatches(result *[]*model.Terminal, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Terminal) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITerminalDo
	Assign(attrs ...field.AssignExpr) ITerminalDo
	Joins(fields ...field.RelationField) ITerminalDo
	Preload(fields ...field.RelationField) ITerminalDo
	FirstOrInit() (*model.Terminal, error)
	FirstOrCreate() (*model.Terminal, error)
	FindByPage(offset int, limit int) (result []*model.Terminal, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITerminalDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t terminalDo) Debug() ITerminalDo {
	return t.withDO(t.DO.Debug())
}

func (t terminalDo) WithContext(ctx context.Context) ITerminalDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t terminalDo) ReadDB() ITerminalDo {
	return t.Clauses(dbresolver.Read)
}

func (t terminalDo) WriteDB() ITerminalDo {
	return t.Clauses(dbresolver.Write)
}

func (t terminalDo) Clauses(conds ...clause.Expression) ITerminalDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t terminalDo) Returning(value interface{}, columns ...string) ITerminalDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t terminalDo) Not(conds ...gen.Condition) ITerminalDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t terminalDo) Or(conds ...gen.Condition) ITerminalDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t terminalDo) Select(conds ...field.Expr) ITerminalDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t terminalDo) Where(conds ...gen.Condition) ITerminalDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t terminalDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITerminalDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t terminalDo) Order(conds ...field.Expr) ITerminalDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t terminalDo) Distinct(cols ...field.Expr) ITerminalDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t terminalDo) Omit(cols ...field.Expr) ITerminalDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t terminalDo) Join(table schema.Tabler, on ...field.Expr) ITerminalDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t terminalDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITerminalDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t terminalDo) RightJoin(table schema.Tabler, on ...field.Expr) ITerminalDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t terminalDo) Group(cols ...field.Expr) ITerminalDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t terminalDo) Having(conds ...gen.Condition) ITerminalDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t terminalDo) Limit(limit int) ITerminalDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t terminalDo) Offset(offset int) ITerminalDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t terminalDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITerminalDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t terminalDo) Unscoped() ITerminalDo {
	return t.withDO(t.DO.Unscoped())
}

func (t terminalDo) Create(values ...*model.Terminal) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t terminalDo) CreateInBatches(values []*model.Terminal, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t terminalDo) Save(values ...*model.Terminal) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t terminalDo) First() (*model.Terminal, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Terminal), nil
	}
}

func (t terminalDo) Take() (*model.Terminal, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Terminal), nil
	}
}

func (t terminalDo) Last() (*model.Terminal, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Terminal), nil
	}
}

func (t terminalDo) Find() ([]*model.Terminal, error) {
	result, err := t.DO.Find()
	return result.([]*model.Terminal), err
}

func (t terminalDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Terminal, err error) {
	buf := make([]*model.Terminal, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t terminalDo) FindInBatches(result *[]*model.Terminal, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t terminalDo) Attrs(attrs ...field.AssignExpr) ITerminalDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t terminalDo) Assign(attrs ...field.AssignExpr) ITerminalDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t terminalDo) Joins(fields ...field.RelationField) ITerminalDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t terminalDo) Preload(fields ...field.RelationField) ITerminalDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t terminalDo) FirstOrInit() (*model.Terminal, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Terminal), nil
	}
}

func (t terminalDo) FirstOrCreate() (*model.Terminal, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Terminal), nil
	}
}

func (t terminalDo) FindByPage(offset int, limit int) (result []*model.Terminal, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t terminalDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t terminalDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t terminalDo) Delete(models ...*model.Terminal) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *terminalDo) withDO(do gen.Dao) *terminalDo {
	t.DO = *do.(*gen.DO)
	return t
}
